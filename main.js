!function(){"use strict";class e{constructor(e){console.log(e.headers),this.baseUrl=e.baseUrl,this.headers=e.headers,console.log(this.headers)}deleteCard(e){return this._request(`${this.baseUrl}/cards/${e}`,{headers:this.headers,method:"DELETE"})}_checkResponse(e){return e.ok?e.json():Promise.reject(e)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.headers})}addCard(e){return this._request(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}"";addLike(e){return this._request(`${this.baseUrl}/cards/likes/${e}`,{headers:this.headers,method:"PUT"})}}class t{constructor(e,t,s){let{name:r,link:i,_id:o}=e;this._name=r,this._link=i,this._cardId=o,this._cardSelector=s,console.log(this._cardId),this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._cardImage=this._element.querySelector(".card__image"),this._trashButton=this._element.querySelector(".card__trash-button")}_addCard(){new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}}).addCard({id:this._cardId,name:this._name,link:this._link}).then((e=>{console.log("Card added successfully:",e)})).catch((e=>{console.error("Error adding card:",e)}))}_handleImageClick(){return this._addCard()}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLike),this._trashButton.addEventListener("click",(()=>this._deleteCard())),this._cardImage.addEventListener("click",(()=>this._handleImageClick()))}_handleLike=()=>{this._likeButton.classList.toggle("card__like-button_active")};_deleteCard(){new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}}).deleteCard(this._cardId).then((()=>{this._element.remove(),this._element=null})).catch((e=>{console.error(e.message)}))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt=`Photo of ${this._name}`,this._element.querySelector(".card__title").textContent=this._name,this._element}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._formInputs=this._popupForm.querySelectorAll("input"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()}))}}const o={formSelector:".modal__form",cardTemplate:"#card-template",modalAddCard:"#modalAddCard",modalProfile:"#modalEdit",profileForm:"#edit__profile__form",modalImage:"#preview_image",imageModalContainer:".preview__container",images:".card",cardList:".cards__list",profileAddForm:"#add__card__form",profileName:".profile__title",profileSubtitle:".profile__subtitle",profileAddButton:".profile__card-button"};class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=this._form.querySelectorAll(this._inputSelector),console.log(this._inputList),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleInputState(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkValidity(e){return!e.validity.valid}_hasInvalidInput=()=>Array.from(this._inputList).some(this._checkValidity);_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this.disableButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputState(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}const a=document.querySelector(".profile__button"),l=document.querySelector("#profile-title-input"),d=document.querySelector("#profile-subtitle-input"),c=(document.querySelector(".profile__card-button"),document.forms.formAddCard,document.forms.profileForm),u=new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}}),h={};var _;let m;function p(e){const s=new t(e,"#card-template",openCardForm);m.addItem(s.getView())}_={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__input-error_visible",modalSelector:".modal__form"},Array.from(document.querySelectorAll(_.modalSelector)).forEach((e=>{const t=new n(_,e),s=e.getAttribute("name");h[s]=t,t.enableValidation()})),new class extends r{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".preview__image"),this._caption=this._popupElement.querySelector(".preview__caption"),super.setEventListeners()}open(e){this._caption.textContent=e.name,this._image.src=e.link,this._image.alt=`image ${e.name}`,super.open()}}(o.modalImage),u.getInitialCards().then((e=>{m=new s({items:e,renderer:e=>{p(e)}},".cards__list"),m.renderItems()})).catch((e=>{console.log(e)}));const f=new i(o.modalAddCard,(function(e){u.addCard(e).then((e=>{console.log(e),p(e),o.profileAddForm.reset(),f.close()})).catch((e=>{console.error(e.message)}))}));f.setEventListeners(),o.profileAddButton.addEventListener("click",(function(){f.open()}));const b=new class{constructor(e,t){this._name=document.querySelector(e),this._subtitle=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,subtitle:this._subtitle.textContent}}setUserInfo(e,t){this._name.textContent=e,this._subtitle.textContent=t}}(o.profileName,o.profileSubtitle),v=new i(o.modalProfile,(e=>{let{name:t,subtitle:s}=e;b.setUserInfo(t,s),v.close()}));a.addEventListener("click",(()=>{!function(){const e=b.getUserInfo();l.value=e.name,d.value=e.subtitle,v.open()}(),function(){const e=h[c.getAttribute("name")];e.resetValidation(),e.disableButton()}()})),v.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,