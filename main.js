!function(){"use strict";[{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"},{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"}].forEach((t=>{const e={name:t.name,link:t.link},s={method:"POST",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"},body:JSON.stringify(e)};fetch("https://around-api.en.tripleten-services.com/v1/cards",s).then((t=>t.ok?t.json():t.json().then((t=>{throw new Error(t.message)})))).then((t=>{console.log("Card posted successfully:",t)})).catch((t=>{console.error("Failed to post card:",t)}))}));class t{constructor(t,e,s){let{name:n,link:r}=t;this._name=n,this._link=r,this._cardSelector=s,this._handleImageClick=e,this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._cardImage=this._element.querySelector(".card__image"),this._trashButton=this._element.querySelector(".card__trash-button"),this._setEventListeners()}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLike),this._trashButton.addEventListener("click",(()=>this._deleteCard())),this._cardImage.addEventListener("click",(()=>this._handleImageClick({link:this._link,name:this._name})))}_handleLike=()=>{this._likeButton.classList.toggle("card__like-button_active")};_deleteCard(){this._element.remove(),this._element=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardImage.src=this._link,this._cardImage.alt=`Photo of ${this._name}`,this._element.querySelector(".card__title").textContent=this._name,this._element}}class e{constructor(t,e){let{items:s,renderer:n}=t;this._items=s,this._renderer=n,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}class s{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(t=>{t.target===t.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}}class n extends s{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._formInputs=this._popupForm.querySelectorAll("input"),this._handleFormSubmit=e}_getInputValues(){const t={};return this._formInputs.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()}))}}class r{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputList=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleInputState(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_checkValidity(t){return!t.validity.valid}_hasInvalidInput=()=>Array.from(this._inputList).some(this._checkValidity);_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this.disableButton(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._toggleInputState(t),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}}const i=document.querySelector(".profile__button"),o=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-subtitle-input"),l=document.querySelector(".profile__card-button"),c=document.forms.formAddCard,u=document.forms.profileForm,h=new class{constructor(t){console.log(t.headers),this.baseUrl=t.baseUrl,this.headers=t.headers,console.log(this.headers)}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}_request(t,e){return fetch(t,e).then(this._checkResponse)}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.headers})}_loadData(){return this.getInitialCards()}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}}),d={};var _;_={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__input-error_visible",modalSelector:".modal__form"},Array.from(document.querySelectorAll(_.modalSelector)).forEach((t=>{const e=new r(_,t),s=t.getAttribute("name");d[s]=e,e.enableValidation()}));const m=new class extends s{constructor(t){super({popupSelector:t}),this._image=this._popupElement.querySelector(".preview__image"),this._caption=this._popupElement.querySelector(".preview__caption"),super.setEventListeners()}open(t){this._caption.textContent=t.name,this._image.src=t.link,this._image.alt=`image ${t.name}`,super.open()}}("#preview_image");function p(e){return new t(e,(t=>{m.open(t)}),"#card-template").getView()}let g;h.getInitialCards().then((t=>{g=new e({items:t,renderer:t=>{g.addItem(p(t))}},".cards"),g.renderItems()})).catch((t=>{console.error("Error fetching initial cards:",t)}));const v=new n("#modalAddCard",(t=>{const e=p(t);v.close(),g.addItem(e),d[c.getAttribute("name")].disableButton()}));l.addEventListener("click",(()=>{v.open()})),v.setEventListeners();const E=new class{constructor(t,e){this._name=document.querySelector(t),this._subtitle=document.querySelector(e)}getUserInfo(){return{name:this._name.textContent,subtitle:this._subtitle.textContent}}setUserInfo(t,e){this._name.textContent=t,this._subtitle.textContent=e}}(".profile__title",".profile__subtitle"),b=new n("#modalEdit",(t=>{let{name:e,subtitle:s}=t;E.setUserInfo(e,s),b.close()}));i.addEventListener("click",(()=>{!function(){const t=E.getUserInfo();o.value=t.name,a.value=t.subtitle,b.open()}(),function(){const t=d[u.getAttribute("name")];t.resetValidation(),t.disableButton()}()})),b.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,