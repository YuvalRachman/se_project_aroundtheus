!function(){"use strict";var t={d:function(e,s){for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};t.d({},{f:function(){return _}});class e{constructor(t,e,s){let{name:r,link:n,_id:i}=t;this._name=r,this._link=n,this._cardId=i,this._cardSelector=s,this._handleImageClick=e,this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._cardImage=this._element.querySelector(".card__image"),this._trashButton=this._element.querySelector(".card__trash-button"),this._setEventListeners()}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLike),this._trashButton.addEventListener("click",(()=>this._deleteCard())),this._cardImage.addEventListener("click",(()=>this._handleImageClick({link:this._link,name:this._name,id:this._cardId})))}_handleLike=()=>{this._likeButton.classList.toggle("card__like-button_active")};_deleteCard(){_(this._cardId).then((()=>{this._element.remove(),this._element=null})).catch((t=>{console.error(t.message)}))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardImage.src=this._link,this._cardImage.alt=`Photo of ${this._name}`,this._element.querySelector(".card__title").textContent=this._name,this._element}}class s{constructor(t,e){let{items:s,renderer:r}=t;this._items=s,this._renderer=r,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}class r{constructor(t){let{popupSelector:e}=t;this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(t=>{t.target===t.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}}class n extends r{constructor(t,e){super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._formInputs=this._popupForm.querySelectorAll("input"),this._handleFormSubmit=e}_getInputValues(){const t={};return this._formInputs.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()}))}}class i{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputList=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleInputState(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_checkValidity(t){return!t.validity.valid}_hasInvalidInput=()=>Array.from(this._inputList).some(this._checkValidity);_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this.disableButton(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._toggleInputState(t),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}}const o=document.querySelector(".profile__button"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-subtitle-input"),c=document.querySelector(".profile__card-button"),u=document.forms.formAddCard,d=document.forms.profileForm,h=new class{constructor(t){this.baseUrl=t.baseUrl,this.headers=t.headers}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}_request(t,e){return fetch(t,e).then(this._checkResponse)}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}});function _(t){const e=`https://around-api.en.tripleten-services.com/v1/cards/${t}`;return console.log(e),fetch(e,{method:"DELETE",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"}}).then((t=>{if(!t.ok)throw new Error(`Failed to delete card: ${t.status}`)})).catch((t=>{throw console.error(t.message),t}))}const m={};var p;p={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__input-error_visible",modalSelector:".modal__form"},Array.from(document.querySelectorAll(p.modalSelector)).forEach((t=>{const e=new i(p,t),s=t.getAttribute("name");m[s]=e,e.enableValidation()}));const v=new class extends r{constructor(t){super({popupSelector:t}),this._image=this._popupElement.querySelector(".preview__image"),this._caption=this._popupElement.querySelector(".preview__caption"),super.setEventListeners()}open(t){this._caption.textContent=t.name,this._image.src=t.link,this._image.alt=`image ${t.name}`,super.open()}}("#preview_image");function E(t){return new e(t,(t=>{v.open(t)}),"#card-template").getView()}[].forEach((t=>{const e={id:t.id,name:t.name,link:t.link},s={method:"POST",headers:{authorization:"59d50a7d-5cbc-4141-92cc-d4a1e1821930","Content-Type":"application/json"},body:JSON.stringify(e)};fetch("https://around-api.en.tripleten-services.com/v1/cards",s).then((t=>{if(!t.ok)throw new Error(`Failed to post card: ${t.status}`);return t.json()})).then((t=>{console.log("Card posted successfully:",t)})).catch((t=>{console.error(t.message)}))})),h.getInitialCards().then((t=>{const e=new s({items:t,renderer:t=>{e.addItem(E(t))}},".cards__list");e.renderItems()})).catch((t=>{console.error("Error fetching initial cards:",t)}));const b=new n("#modalAddCard",(t=>{const e=E(t);b.close(),cardSection.addItem(e),m[u.getAttribute("name")].disableButton()}));c.addEventListener("click",(()=>{b.open()})),b.setEventListeners();const f=new class{constructor(t,e){this._name=document.querySelector(t),this._subtitle=document.querySelector(e)}getUserInfo(){return{name:this._name.textContent,subtitle:this._subtitle.textContent}}setUserInfo(t,e){this._name.textContent=t,this._subtitle.textContent=e}}(".profile__title",".profile__subtitle"),g=new n("#modalEdit",(t=>{let{name:e,subtitle:s}=t;f.setUserInfo(e,s),g.close()}));o.addEventListener("click",(()=>{!function(){const t=f.getUserInfo();a.value=t.name,l.value=t.subtitle,g.open()}(),function(){const t=m[d.getAttribute("name")];t.resetValidation(),t.disableButton()}()})),g.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,